% see mmm.sty for implementation of newmeta etc

% macros for Clojure grammars
\usepackage{mathpartir}
\usepackage{amsfonts}
\usepackage{bbm}


% newmeta variables are automatically subscripted
% \x0, \x1, \x{}

%% metavariables

% constants
\newmeta\c{c}

% types
\newmeta\s{\sigma}              % these are automatically wrapped in \ma
\newmeta\t{\tau}
\newmeta\T{T}

% expressions
\newmeta\M{M}
\newmeta\N{N}
\newmeta\P{P}
\newmeta\e{e}
\newmeta\expd{d}

% we write a macro for every bit of abstract syntax.  That way they
% will all look the same!

% types
\newbfop\int{int}
\newbfop\bool{bool}
\newbfop\IPersistentMapLiteral{IPersistentMap}
\newbfop\Uliteral{\ma{\cup}}
\newbfop\ILiteral{\wedge}
\newbfop\Not{Not}
\newbfop\Allliteral{All}
\newbfop\TFnliteral{TFn}
\newbfop\Valueliteral{Value}
\newbfop\ArrayTwoLiteral{Array2}
\newbfop\ArrayLiteral{Array}
\newbfop\Throwable{java.lang.Throwable}
\newcommand\proctype[2]{(#1 \to #2)}
\newcommand\Unionsplice[1]{(\ma{\Uliteral\ #1})}
\newcommand\Union[2]{(\ma{\cup\ #1\ #2})}
\newcommand\ArrayTwo[2]{(\ma{\ArrayTwoLiteral\ #1\ #2})}
\newcommand\Array[1]{(\ArrayLiteral #1)}
% \proctype is a little overkill.
%% Reynolds' package can also abstract things like (\s1 \to \s2 \to \s3).
\newcommand\Arrow[5]{\ma{#1 \xrightarrow[#4; #5]{#3} #2}}

\newcommand\All[2]{(\ma{\Allliteral\ [#1]\ #2})}
\newcommand\TFn[2]{(\ma{\TFnliteral\ [#1]\ #2})}
\newcommand\Value[1]{(\ma{\Valueliteral\ #1})}
\newbfop\Top{Any}
\newbfop\Bottom{Nothing}
\newbfop\Keyword{Keyword}
\newbfop\Symbol{Symbol}
\newbfop\Number{Number}
\newbfop\Nil{nil}
\newbfop\True{true}
\newbfop\False{false}
\newbfop\falsy{(\ma{\cup\ \Nil\ \False})}
\newcommand\IPersistentMap[2]{(\IPersistentMapLiteral\ #1\ #2)}
\newbfop\TopIPersistentMap{{\IPersistentMap {\Top} {\Top}}}
\newbfop\TopHMap{\{ \}}

% terms
\newmeta\x{x}                   % not sure if \x is reserved...
\newmeta\v{v}
\newmeta\class{C}
\newmeta\k{k}
\newmeta\nil{{\bf nil}}
\newmeta\true{{\bf true}}
\newmeta\false{{\bf false}}
\newmeta\assoc{assoc}
\newmeta\dissoc{dissoc}
\newmeta\get{get}
\newmeta\tryliteral{{\bf try}}
\newmeta\catchliteral{{\bf catch}}
\newmeta\finallyliteral{{\bf finally}}
\newmeta\ifliteral{{\bf if}}
\newmeta\doliteral{{\bf do}}
\newmeta\fnliteral{{\bf fn}}
\newmeta\letliteral{{\bf let}}
\newmeta\throwliteral{{\bf throw}}
\newmeta\newliteral{{\bf new}}
\newcommand\abs[2]{\ma{\l #1 . #2}}
\newcommand\comb[2]{\ma{(#1\ #2)}}
\newcommand\tryexp[5]{(\ma{\tryliteral{}\ #1\ (\ma{\catchliteral{}\ #2\ #3\ #4})\ (\ma{\finallyliteral{}\ #5})})}
\newcommand\ifexp[3]{(\ma{\ifliteral{}\ #1\ #2\ #3})}
\newcommand\doexp[2]{(\ma{\doliteral{}\ #1\ #2})}
\newcommand\fnexp[2]{(\ma{\fnliteral{}\ [#1]\ #2})}
\newcommand\letexp[3]{(\ma{\letliteral{}\ [\ma{#1\ #2}]\ #3})}
\newcommand\throwexp[1]{(\ma{\throwliteral{}\ #1})}
\newcommand\newexp[2]{(\ma{\newliteral{}\ #1\ #2})}

% Clojure values
\newmeta\symbol{symbol}
\newmeta\nat{nat}

% constant calls

% typing judgements
\newcommand\hastype[2]{\ma{#1 \mathbin{:} #2}}
\newcommand\issubtype[2]{\ma{#1 \mathbin{<:} #2}}
\newcommand\judgement[5]{\ma{#1 \vdash #2\ ;\ #3\ ;\ #4\ ;\ #5}}
% lookuping props in the env
\newcommand\inpropenv[2]{\ma{#1 \vdash #2}}

% environment
\newcommand\propenv{\Gamma}

% evaluation contexts
\newmeta\E{E}


% propositions
\newmeta\prop{\psi}
\newmeta\pathelem{PE}
\newcommand\isprop[2]{\ma{{#1}_{#2}}}
\newcommand\impprop[2]{\ma{#1 \supset #2}}
\newcommand\notprop[2]{\ma{{\overline{#1}}_{#2}}}
\newcommand\andprop[2]{\ma{#1 \wedge #2}}
\newcommand\orprop[2]{\ma{#1 \vee #2}}
\newmeta\topprop{\mathbbm{tt}}
\newmeta\botprop{\mathbbm{ff}}
\newcommand\filterset[2]{\ma{#1 | #2}}
\newcommand\thenprop[1]{\ma{{#1}_+}}
\newcommand\elseprop[1]{\ma{{#1}_-}}
\newcommand\flowprop[1]{\ma{{#1}_\rightarrow}}

% objects
\newcommand\path[2]{\ma{#1(#2)}}
\newmeta\object{o}
\newmeta\emptyobject{\emptyset}
\newmeta\pathelem{\pi}
% abstract syntax for pathelem
\newmeta\pesyntax{pe}
\newmeta\classpe{{\bf Class}}

% scope replacements
\newcommand\replacefor[3]{\ma{#1 [#2 / #3]}}

% Java type conversion functions
\newcommand\javaspecial[1]{{\bf SpecialToTC}(\ma{#1})}
\newcommand\javatotc[2]{{\bf JavaToTC}(\ma{#1, #2})}
\newcommand\JavaField[1]{{\bf Field}(\ma{#1})}
\newcommand\JavaMethod[2]{{\bf Method}(\ma{#1, #2})}
\newcommand\JavaCtor[2]{{\bf Ctor}(\ma{#1, #2})}
\newcommand\JavaArray[1]{#1[]}
